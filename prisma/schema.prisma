generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email          String              @unique
  password       String
  name           String
  country        String              @default("")
  gender         String              @default("")
  birthYear      String              @default("")
  birthMonth     String              @default("")
  birthDay       String              @default("")
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  image          String              @default("")
  membershipType String              @default("free")
  id             Int                 @id @default(autoincrement())
  role           String              @default("user")
  bookmarks      Bookmark[]
  ceoProfile     CEOProfile?
  stores         Restaurant[]
  reviews        Review[]
  serialNumbers  SerialNumber[]
  viewLogs       RestaurantViewLog[]
  bookmarkLogs   BookmarkLog[]
  paymentStatus      PaymentStatus      @default(unpaid)
}

model CEOProfile {
  id                 String             @id @default(uuid())
  userId             Int                @unique
  businessName       String?
  businessNumber     String?             @unique
  verificationStatus VerificationStatus @default(pending)
  registrationImage  String?
  createdAt          DateTime           @default(now())
  user               User               @relation(fields: [userId], references: [id])
  ceoName            String?
  address            String?
  addressDetail      String?
  startDate          DateTime?
   // ✅ 추가
  paymentStatus      PaymentStatus      @default(unpaid) // 결제 여부 (unpaid / paid)
  paymentPlan        PaymentPlan?                       // 어떤 요금제인지
// ✅ 요거 추가
  setupStatus        SetupStatus        @default(not_started)
}

enum SetupStatus {
  not_started   // 결제 전
  paid_only     // 결제만 완료 (사업자/매장 미입력)
  info_filled   // 사업자/매장 정보 입력 완료
  submitted     // 입점 신청 완료
}


model Bookmark {
  id           String     @id @default(cuid())
  userId       Int
  restaurantId String
  createdAt    DateTime   @default(now())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, restaurantId])
  @@index([restaurantId])
  @@index([userId])
}

model RestaurantViewLog {
  id           String     @id @default(cuid())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  user         User?      @relation(fields: [userId], references: [id])
  userId       Int?
  viewedAt     DateTime   @default(now()) // 조회 시각
  ipAddress    String? // 중복방지용
  userAgent    String?
}

model BookmarkLog {
  id           String     @id @default(cuid())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  bookmarkedAt DateTime   @default(now()) // 북마크 추가 시각
}

model Restaurant {
  id                     String              @id @default(cuid())
  name                   String
  description            String              @default("")
  about                  String              @default("")
  address                String
  latitude               Float
  longitude              Float
  rating                 Float?              @default(0)
  specialOfferText       String              @default("")
  images                 String[]            @default([])
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  addressDetail          String              @default("")
  languages              String[]            @default([])
  region1                String?             @default("")
  region2                String?             @default("")
  region3                String?             @default("")
  region4                String?
  socialLinks            Json?
  tags                   String[]            @default([])
  specialOfferType       String[]            @default([])
  specialOfferTextDetail String              @default("")
  openingHoursText       String?
  viewCount              Int                 @default(0)
  ownerId                Int?
  bookmarks              Bookmark[]
  owner                  User?               @relation(fields: [ownerId], references: [id])
  reviews                Review[]
  viewLogs               RestaurantViewLog[]
  bookmarkLogs           BookmarkLog[]
  categoryId     String?
  subCategoryId  String?
  category       Category?    @relation(fields: [categoryId], references: [id])
  subCategory    SubCategory? @relation(fields: [subCategoryId], references: [id])
}

model Review {
  id           String     @id
  content      String?
  rating       Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurantId String
  images       String[]
  userId       Int
  tags         String[]   @default([])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model SerialNumber {
  id             String   @id @default(cuid())
  code           String   @unique
  isUsed         Boolean  @default(false)
  usedAt         DateTime?
  createdAt      DateTime  @default(now())
  expiresAt      DateTime?
  disposedAt     DateTime?  // ✅ 폐기일 추가
  type           String    @default("standard")
  metadata       Json?
  userId         Int?
  activatedUntil DateTime?
  user           User?     @relation(fields: [userId], references: [id])
  @@index([code])
  @@index([userId])
  @@index([disposedAt])  // ✅ 폐기일 검색 빠르게 하려고 인덱스 추가해도 좋음
}

model Category {
  id             String           @id @default(cuid())
  name           String           @unique          // 예: 맛집
  key            String           @unique          // 예: food
  subCategories  SubCategory[]                      // relation
  restaurants    Restaurant[]                       // relation
  createdAt      DateTime         @default(now())
}

model SubCategory {
  id         String      @id @default(cuid())
  name       String                         // 예: 일식, 양식
  key        String                         // 예: japanese, western
  categoryId String
  category   Category    @relation(fields: [categoryId], references: [id])
  restaurants Restaurant[]
  createdAt  DateTime    @default(now())

  @@unique([categoryId, name])
}

model EmailVerification {
  id        String   @id @default(uuid())
  email     String   @unique
  code      String
  verified  Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum VerificationStatus {
  pending
  approved
  rejected
}

enum PaymentStatus {
  unpaid
  paid
}

enum PaymentPlan {
  single
  multi
  special
}