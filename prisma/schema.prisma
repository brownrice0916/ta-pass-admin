generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email          String              @unique
  password       String
  name           String
  country        String              @default("")
  gender         String              @default("")
  birthYear      String              @default("")
  birthMonth     String              @default("")
  birthDay       String              @default("")
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  image          String              @default("")
  membershipType String              @default("free")
  id             Int                 @id @default(autoincrement())
  role           String              @default("user")
  bookmarks      Bookmark[]
  ceoProfile     CEOProfile?
  stores         Restaurant[]
  reviews        Review[]
  serialNumbers  SerialNumber[]
  viewLogs       RestaurantViewLog[]
  bookmarkLogs   BookmarkLog[]
}

model CEOProfile {
  id                 String             @id @default(uuid())
  userId             Int                @unique
  businessName       String
  businessNumber     String             @unique
  verificationStatus VerificationStatus @default(pending)
  registrationImage  String?
  createdAt          DateTime           @default(now())
  user               User               @relation(fields: [userId], references: [id])
}

model Bookmark {
  id           String     @id @default(cuid())
  userId       Int
  restaurantId String
  createdAt    DateTime   @default(now())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, restaurantId])
  @@index([restaurantId])
  @@index([userId])
}

model RestaurantViewLog {
  id           String     @id @default(cuid())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  user         User?      @relation(fields: [userId], references: [id])
  userId       Int?
  viewedAt     DateTime   @default(now()) // Ï°∞Ìöå ÏãúÍ∞Å
  ipAddress    String? // Ï§ëÎ≥µÎ∞©ÏßÄÏö©
  userAgent    String?
}

model BookmarkLog {
  id           String     @id @default(cuid())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  bookmarkedAt DateTime   @default(now()) // Î∂ÅÎßàÌÅ¨ Ï∂îÍ∞Ä ÏãúÍ∞Å
}

model Restaurant {
  id                     String              @id @default(cuid())
  name                   String
  description            String              @default("")
  about                  String              @default("")
  address                String
  latitude               Float
  longitude              Float
  category               String?
  rating                 Float?              @default(0)
  specialOfferText       String              @default("")
  images                 String[]            @default([])
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  addressDetail          String              @default("")
  languages              String[]            @default([])
  region1                String?             @default("")
  region2                String?             @default("")
  region3                String?             @default("")
  region4                String?
  socialLinks            Json?
  tags                   String[]            @default([])
  specialOfferType       String[]            @default([])
  specialOfferTextDetail String              @default("")
  subCategory            String?
  openingHoursText       String?
  viewCount              Int                 @default(0)
  ownerId                Int?
  bookmarks              Bookmark[]
  owner                  User?               @relation(fields: [ownerId], references: [id])
  reviews                Review[]
  viewLogs               RestaurantViewLog[]
  bookmarkLogs           BookmarkLog[]
}

model Review {
  id           String     @id
  content      String?
  rating       Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurantId String
  images       String[]
  userId       Int
  tags         String[]   @default([])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model SerialNumber {
    id        String   @id @default(cuid()) // üëà Ïù¥Í≤å ÏûàÏñ¥Ïïº Ìï®
  code           String    @unique
  isUsed         Boolean   @default(false)
  usedAt         DateTime?
  createdAt      DateTime  @default(now())
  expiresAt      DateTime?
  type           String    @default("standard")
  metadata       Json?
  userId         Int?
  activatedUntil DateTime?
  user           User?     @relation(fields: [userId], references: [id])

  @@index([code])
  @@index([userId])
}

model EmailVerification {
  id        String   @id
  email     String   @unique
  code      String
  verified  Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum VerificationStatus {
  pending
  approved
  rejected
}
